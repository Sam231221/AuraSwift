name: Compile and test on Windows

on:
  workflow_call:
    inputs:
      renderer-template:
        description: Define what vite template should be used to create renderer in case if renderer package doesn't exist
        required: false
        type: string
        default: ""
      app-version:
        required: true
        type: string
      distribution-channel:
        required: true
        type: string

defaults:
  run:
    shell: "bash"

permissions:
  contents: write
  id-token: write
  attestations: write

env:
  NODE_NO_WARNINGS: 1
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  ELECTRON_DISABLE_GPU: 1
  ELECTRON_NO_SANDBOX: 1
  npm_config_audit: false
  npm_config_fund: false
  PYTHON: python
  MSVS-VERSION: 2022
  GYP-MSVS-VERSION: 2022

jobs:
  # Quick typecheck job - runs in parallel with build
  typecheck:
    runs-on: ubuntu-latest # Use faster/cheaper Linux for typecheck
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Cache node_modules for typecheck
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: typecheck-deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            typecheck-deps-${{ runner.os }}-

      - name: Install dependencies (lightweight, no native builds needed)
        run: npm ci --prefer-offline --no-audit --no-fund --ignore-scripts
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Run typecheck
        run: npm run typecheck -ws --if-present

  # Build and test job - Windows for native modules and building
  build-and-test:
    runs-on: windows-latest
    env:
      PYTHON: python
      MSVS-VERSION: 2022
      GYP-MSVS-VERSION: 2022
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js 18 for native module compatibility
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup MSBuild (Windows)
        uses: microsoft/setup-msbuild@v2

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Show build environment summary
        run: |
          echo "Node.js version: $(node --version)"
          echo "Python version: $(python --version)"
          echo "MSBuild available: $(Get-Command msbuild -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source)"
        shell: powershell

      # Cache global npm packages
      - name: Cache global npm packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/npm-cache
            C:\Users\runneradmin\AppData\Roaming\npm
          key: npm-global-${{ runner.os }}-${{ hashFiles('package.json') }}
          restore-keys: |
            npm-global-${{ runner.os }}-

      - name: Install and configure node-gyp/electron-rebuild globally
        run: |
          npm install --location=global node-gyp@latest electron-rebuild@latest
          echo "node-gyp version: $(npx node-gyp --version)"
          echo "electron-rebuild version: $(npx electron-rebuild --version)"
        shell: powershell

      - uses: ./.github/actions/init-template-with-renderer
        name: Setup boilerplate
        with:
          renderer-template: ${{inputs.renderer-template}}

      # Enhanced caching for node_modules including native modules
      - name: Cache node_modules and native builds
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            **/node_modules/better-sqlite3/build
            **/node_modules/node-hid/build
            **/node_modules/serialport/build
            **/node_modules/usb/build
            node_modules/electron/dist
          key: node-deps-${{ runner.os }}-node18-electron-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            node-deps-${{ runner.os }}-node18-electron-
            node-deps-${{ runner.os }}-node18-

      - name: Install project dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss - installing dependencies..."
          npm ci --prefer-offline --no-audit --no-fund
        shell: powershell
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Install dependencies (cache hit - verify only)
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          echo "✅ Cache hit! Skipping npm ci"
          echo "Verifying node_modules..."
          if (Test-Path "node_modules") {
            echo "✅ node_modules directory exists"
          }

          echo "Verifying Electron installation..."
          if (Test-Path "node_modules/electron/dist/electron.exe") {
            echo "✅ Electron binary found"
          } else {
            echo "⚠️ Electron binary not found, installing..."
            npm install electron --no-save
          }
        shell: powershell

      - name: Rebuild native modules (only if not cached)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "Rebuilding native modules..."
          npx electron-rebuild --only=better-sqlite3,node-hid,serialport,usb --verbose
        shell: powershell

      - name: Verify native modules are ready
        run: |
          $modules = @("better-sqlite3", "node-hid", "serialport", "usb")
          foreach ($module in $modules) {
            if (Test-Path "node_modules/$module/build") {
              echo "✅ $module native build found"
            } else {
              echo "❌ WARNING: $module native build not found"
            }
          }
        shell: powershell

      - run: npm version "${{inputs.app-version}}" --no-git-tag-version

      - name: Verify Electron is installed before build
        run: |
          echo "Checking Electron installation..."
          if (Test-Path "node_modules/electron/dist/electron.exe") {
            echo "✅ Electron binary found at: node_modules/electron/dist/electron.exe"
            $electronVersion = & node -e "console.log(require('electron/package.json').version)"
            echo "Electron version: $electronVersion"
          } else {
            echo "❌ ERROR: Electron binary not found!"
            echo "Installing Electron now..."
            npm install electron --no-save
            if (Test-Path "node_modules/electron/dist/electron.exe") {
              echo "✅ Electron successfully installed"
            } else {
              echo "❌ Failed to install Electron"
              exit 1
            }
          }
        shell: powershell

      # Cache Vite build outputs to speed up subsequent builds
      - name: Cache Vite build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/renderer/dist
            packages/main/dist
            packages/preload/dist
            packages/renderer/node_modules/.vite
            packages/main/node_modules/.vite
          key: vite-build-${{ runner.os }}-${{ hashFiles('packages/*/src/**', 'packages/*/tsconfig.json', 'packages/*/vite.config.*') }}
          restore-keys: |
            vite-build-${{ runner.os }}-

      - name: Build and compile Electron app (Windows only)
        run: |
          echo "🔨 Building Electron app with NSIS + Squirrel targets..."
          npm run build

          echo ""
          echo "📦 Building NSIS installer..."
          npx electron-builder --win nsis --config electron-builder.mjs --publish never

          echo ""
          echo "📦 Building Squirrel packages..."
          npx electron-builder --win squirrel --config electron-builder.mjs --publish never
        shell: powershell
        env:
          VITE_DISTRIBUTION_CHANNEL: ${{inputs.distribution-channel}}
          NODE_ENV: production

      - name: Verify build output and hardware modules
        run: |
          if (Test-Path "dist") { 
            echo "✅ Dist directory found"
            echo ""
            echo "📦 All files in dist:"
            dir dist -Recurse -Name
            echo ""
            echo "🔍 Searching for executables and installers:"
            dir dist -Recurse -Include "*.exe", "*.nupkg", "RELEASES", "*.yml"
            echo ""
            echo "📊 File count by type:"
            echo "EXE files: $((dir dist -Recurse -Include "*.exe" -ErrorAction SilentlyContinue).Count)"
            echo "NUPKG files: $((dir dist -Recurse -Include "*.nupkg" -ErrorAction SilentlyContinue).Count)"
            echo "RELEASES files: $((dir dist -Recurse -Include "RELEASES" -ErrorAction SilentlyContinue).Count)"
            echo "YML files: $((dir dist -Recurse -Include "*.yml" -ErrorAction SilentlyContinue).Count)"
          } else { 
            echo "ERROR: No dist directory found after build!"
            exit 1
          }
        shell: powershell

      # Only install Playwright if tests exist (conditional)
      - name: Check if tests exist
        id: check-tests
        run: |
          if (Test-Path "tests") {
            echo "tests-exist=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "tests-exist=false" >> $env:GITHUB_OUTPUT
          }
        shell: powershell

      - name: Install Playwright
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: npx playwright install --with-deps

      - name: Debug build output structure
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: |
          if (Test-Path "dist") { dir dist -Recurse } else { echo "No dist directory found" }
          if (Test-Path "dist") { dir dist -Recurse -Include "*.exe", "*.app" } else { echo "No executables found" }
        shell: powershell

      - name: Pre-test hardware module verification
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: |
          $testReady = $true
          $modules = @("better-sqlite3", "node-hid", "serialport", "usb")
          foreach ($module in $modules) {
            if (Test-Path "node_modules/$module/build") {
              echo "✅ $module native build ready for testing"
            } else {
              echo "❌ WARNING: $module native build not found"
              $testReady = $false
            }
          }
        shell: powershell

      - name: Run main E2E tests
        run: npm run test:all --if-present
        if: steps.check-tests.outputs.tests-exist == 'true'
        env:
          CI: true
          NODE_ENV: test
          ELECTRON_DISABLE_GPU: 1
          ELECTRON_NO_SANDBOX: 1
          PLAYWRIGHT_HEADLESS: 1
          ELECTRON_ENABLE_LOGGING: 1
          DEBUG: playwright:*
          HARDWARE_SIMULATION_MODE: true
          MOCK_PRINTER_ENABLED: true
          MOCK_CARD_READER_ENABLED: true
          MOCK_SCANNER_ENABLED: true
          ELECTRON_UPDATER_DISABLED: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1

      - name: Run hardware integration tests
        run: npx playwright test ./tests/hardware-integration.spec.ts
        if: steps.check-tests.outputs.tests-exist == 'true'
        env:
          CI: true
          NODE_ENV: test
          ELECTRON_DISABLE_GPU: 1
          ELECTRON_NO_SANDBOX: 1
          PLAYWRIGHT_HEADLESS: 1
          ELECTRON_ENABLE_LOGGING: 1
          HARDWARE_SIMULATION_MODE: true
          MOCK_PRINTER_ENABLED: true
          MOCK_CARD_READER_ENABLED: true
          MOCK_SCANNER_ENABLED: true

      - uses: actions/attest-build-provenance@v3
        with:
          subject-path: "dist/auraswift-*, dist/latest*.yml"

      - name: Upload compiled app
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{inputs.distribution-channel}}
          path: dist
          retention-days: 7 # Reduce artifact retention to save storage costs
