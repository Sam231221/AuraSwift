# This workflow is the entry point for all CI processes.
# It handles building, testing, and semantic versioning releases.

name: Entry CI
on:
  workflow_dispatch:
    inputs:
      distribution-channel:
        description: Distribution channel for release. It can be `beta`, `alpha` or any string.
        type: string
        required: false
        default: "main"
      renderer-template:
        description: Define what vite template should be used to create renderer in case if renderer package doesn't exist
        required: false
        type: string
        default: ""
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - .editorconfig
      - ".idea/**"
      - ".vscode/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - .editorconfig
      - ".idea/**"
      - ".vscode/**"
  workflow_call:
    inputs:
      distribution-channel:
        description: Distribution channel for release. It can be `beta`, `alpha` or any string.
        type: string
        required: true
      renderer-template:
        description: Define what vite template should be used to create renderer in case if renderer package doesn't exist
        required: false
        type: string
        default: ""

concurrency:
  group: ${{github.workflow}}-${{ github.ref }}-${{ inputs.distribution-channel || 'main' }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
  attestations: write
  issues: write
  pull-requests: write

jobs:
  #Job1: Determine version with semantic-release
  prepare:
    name: Prepare version and check for release
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.version.outputs.APP_VERSION }}
      COMMIT_TIMESTAMP: ${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}
      APP_FULL_VERSION: ${{ steps.version.outputs.APP_FULL_VERSION }}
      SHOULD_RELEASE: ${{ steps.version.outputs.SHOULD_RELEASE }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || github.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install semantic-release dependencies only
        run: |
          # Install only semantic-release packages, skip native modules
          npm install --no-save \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator

      - id: COMMIT_TIMESTAMP
        run: echo "COMMIT_TIMESTAMP=$(git show -s --format=%ct ${{ github.sha }})" >> $GITHUB_OUTPUT

      - id: version
        name: Determine version with semantic-release
        run: |
          # Get timestamp for version string
          TIMESTAMP="${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}"

          # For PRs and non-main pushes, use current version
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.ref }}" != "refs/heads/main" ]; then
            CURRENT_VERSION=$(jq -r .version package.json)
            echo "APP_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "APP_FULL_VERSION=$CURRENT_VERSION-${{ inputs.distribution-channel || 'main' }}.${TIMESTAMP}" >> $GITHUB_OUTPUT
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
            echo "ℹ️ PR/branch build - version: $CURRENT_VERSION"
          else
            # For main branch, check semantic-release
            OUTPUT=$(npx semantic-release --dry-run 2>&1 || true)
            echo "$OUTPUT"
            
            # Try multiple patterns to detect new version
            if echo "$OUTPUT" | grep -qE "(The next release version is|Published release)"; then
              # Extract version number
              NEW_VERSION=$(echo "$OUTPUT" | grep -oP "(The next release version is|Published release) \K[0-9]+\.[0-9]+\.[0-9]+" | head -1)
              
              if [ -n "$NEW_VERSION" ]; then
                echo "APP_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
                echo "APP_FULL_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
                echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
                echo "✅ New release will be created: v$NEW_VERSION"
              else
                # Fallback if version extraction fails
                CURRENT_VERSION=$(jq -r .version package.json)
                echo "APP_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                echo "APP_FULL_VERSION=$CURRENT_VERSION-${{ inputs.distribution-channel || 'main' }}.${TIMESTAMP}" >> $GITHUB_OUTPUT
                echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
                echo "⚠️ Could not extract version from semantic-release output"
              fi
            else
              CURRENT_VERSION=$(jq -r .version package.json)
              echo "APP_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "APP_FULL_VERSION=$CURRENT_VERSION-${{ inputs.distribution-channel || 'main' }}.${TIMESTAMP}" >> $GITHUB_OUTPUT
              echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No release needed - using current version: $CURRENT_VERSION"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN || github.token }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || github.token }}

      - name: Add version summary
        run: |
          echo "- \`COMMIT_TIMESTAMP\`: ${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`APP_VERSION\`: ${{ steps.version.outputs.APP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`APP_FULL_VERSION\`: ${{ steps.version.outputs.APP_FULL_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`SHOULD_RELEASE\`: ${{ steps.version.outputs.SHOULD_RELEASE }}" >> $GITHUB_STEP_SUMMARY

  #Job2: Build and test
  compile-and-test:
    needs: prepare
    permissions:
      contents: write
      id-token: write
      attestations: write
    uses: ./.github/workflows/compile-and-test.yml
    secrets: inherit
    with:
      renderer-template: ${{ inputs.renderer-template }}
      app-version: ${{ needs.prepare.outputs.APP_FULL_VERSION }}
      distribution-channel: ${{ inputs.distribution-channel || 'main' }}

  #Job3: Semantic Release (only on main branch when there are releasable commits)
  semantic-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.prepare.outputs.SHOULD_RELEASE == 'true'
    needs:
      - prepare
      - compile-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install semantic-release dependencies only
        run: |
          # Install only semantic-release packages, skip native modules
          npm install --no-save \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: windows-${{ inputs.distribution-channel || 'main' }}
          path: dist

      - name: Run semantic-release
        run: npx semantic-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
