name: Compile and test

on:
  workflow_call:
    inputs:
      renderer-template:
        description: Define what vite template should be used to create renderer in case if renderer package doesn't exist
        required: false
        type: string
        default: ""
      app-version:
        required: true
        type: string
      distribution-channel:
        required: true
        type: string

defaults:
  run:
    shell: "bash"

permissions:
  contents: write
  id-token: write
  attestations: write

env:
  NODE_NO_WARNINGS: 1
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  ELECTRON_DISABLE_GPU: 1
  ELECTRON_NO_SANDBOX: 1
  npm_config_audit: false
  npm_config_fund: false

jobs:
  typecheck:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js 18 for native module compatibility
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup MSBuild (Windows)
        uses: microsoft/setup-msbuild@v2

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Windows build tools for native modules
        run: |
          echo "Installing global build tools for native module compilation..."
          npm install --global --production windows-build-tools
          npm install --global node-gyp
          echo "Build tools installation completed"
        shell: powershell

      - name: Configure environment for Windows native modules
        run: |
          echo "Setting up environment for Windows native module compilation..."
          echo "Node.js version: $(node --version)"
          echo "Python version: $(python --version)"
          echo "node-gyp version: $(node-gyp --version)"
          echo "MSBuild available: $(Get-Command msbuild -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source)"
          echo "Environment configured for node-gyp"
        shell: powershell
        env:
          PYTHON: python
          msvs_version: 2022

      - uses: ./.github/actions/init-template-with-renderer
        name: Setup boilerplate
        with:
          renderer-template: ${{inputs.renderer-template}}
      - run: npm run typecheck -ws --if-present

  compile:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js 18 for native module compatibility
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup MSBuild (Windows)
        uses: microsoft/setup-msbuild@v2

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Windows build tools for native modules
        run: |
          echo "Installing global build tools for native module compilation..."
          npm install --global --production windows-build-tools
          npm install --global node-gyp
          echo "Build tools installation completed"
        shell: powershell

      - name: Configure environment for Windows native modules
        run: |
          echo "Setting up environment for Windows native module compilation..."
          echo "Node.js version: $(node --version)"
          echo "Python version: $(python --version)"
          echo "node-gyp version: $(node-gyp --version)"
          echo "MSBuild available: $(Get-Command msbuild -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source)"
          echo "Environment configured for node-gyp"
        shell: powershell
        env:
          PYTHON: python
          msvs_version: 2022

      - name: Install Windows hardware development dependencies
        run: |
          echo "Installing Windows SDK components for hardware integration..."

          # Install Windows SDK for USB/HID development (if needed)
          # Note: GitHub Actions runners already have most required tools
          echo "Checking for Windows SDK availability..."
          if (Get-Command "msbuild" -ErrorAction SilentlyContinue) {
            echo "‚úÖ MSBuild is available"
          } else {
            echo "‚ùå MSBuild not found"
          }

          # Check for required headers for native modules
          echo "Verifying build environment for hardware native modules..."
          echo "Python: $(python --version)"
          echo "Node.js: $(node --version)"
          echo "npm: $(npm --version)"

          echo "Hardware development environment ready"
        shell: powershell

      - name: Verify Windows build environment
        run: |
          echo "Build environment verification (using GitHub Actions built-in tools):"
          echo "MSBuild: $(msbuild -version | Select-Object -First 1)"
          echo "Python: $(python --version)"
          echo "Node.js: $(node --version)"
          echo "npm: $(npm --version)"
          echo "Build tools ready for native module compilation"
        shell: powershell

      - uses: ./.github/actions/init-template-with-renderer
        name: Setup boilerplate
        with:
          renderer-template: ${{inputs.renderer-template}}

      - name: Rebuild native modules after dependency installation
        run: |
          echo "Rebuilding native modules with proper build tools..."
          npm rebuild
          echo "Native module rebuild completed"
        shell: powershell
        env:
          PYTHON: python
          msvs_version: 2022

      - run: npm version "${{inputs.app-version}}" --no-git-tag-version

      - name: Force clean native modules and rebuild for Electron
        run: |
          echo "Cleaning previous builds and native modules..."
          if (Test-Path "dist") { Remove-Item -Recurse -Force dist }

          echo "Cleaning ALL hardware native module builds..."
          # Database module
          if (Test-Path "node_modules/better-sqlite3/build") { 
            Remove-Item -Recurse -Force "node_modules/better-sqlite3/build"
            echo "Cleaned better-sqlite3 build directory"
          }
          # USB HID devices (Card readers)
          if (Test-Path "node_modules/node-hid/build") { 
            Remove-Item -Recurse -Force "node_modules/node-hid/build"
            echo "Cleaned node-hid build directory"
          }
          # Serial communication (Printers)
          if (Test-Path "node_modules/serialport/build") { 
            Remove-Item -Recurse -Force "node_modules/serialport/build"
            echo "Cleaned serialport build directory"
          }
          # Direct USB access
          if (Test-Path "node_modules/usb/build") { 
            Remove-Item -Recurse -Force "node_modules/usb/build"
            echo "Cleaned usb build directory"
          }

          echo "Rebuilding ALL native modules for Electron..."
          npx electron-rebuild --verbose --force
          echo "Electron rebuild completed"

          echo "Verifying ALL hardware native module builds..."
          $allSuccess = $true

          # Verify better-sqlite3 (Database)
          if (Test-Path "node_modules/better-sqlite3/build") {
            echo "‚úÖ better-sqlite3 rebuilt successfully (Database support)"
            dir "node_modules/better-sqlite3/build" -Name
          } else {
            echo "‚ùå better-sqlite3 rebuild FAILED - DATABASE WILL NOT WORK"
            $allSuccess = $false
          }

          # Verify node-hid (USB HID - Card readers)
          if (Test-Path "node_modules/node-hid/build") {
            echo "‚úÖ node-hid rebuilt successfully (USB card reader support)"
            dir "node_modules/node-hid/build" -Name
          } else {
            echo "‚ùå node-hid rebuild FAILED - CARD READERS WILL NOT WORK"
            $allSuccess = $false
          }

          # Verify serialport (Serial - Printers)
          if (Test-Path "node_modules/serialport/build") {
            echo "‚úÖ serialport rebuilt successfully (Serial printer support)"
            dir "node_modules/serialport/build" -Name
          } else {
            echo "‚ùå serialport rebuild FAILED - SERIAL PRINTERS WILL NOT WORK"
            $allSuccess = $false
          }

          # Verify usb (Direct USB access)
          if (Test-Path "node_modules/usb/build") {
            echo "‚úÖ usb rebuilt successfully (Direct USB device support)"
            dir "node_modules/usb/build" -Name
          } else {
            echo "‚ùå usb rebuild FAILED - USB DEVICES WILL NOT WORK"
            $allSuccess = $false
          }

          if (-not $allSuccess) {
            echo "üí• CRITICAL: Some hardware modules failed to build!"
            echo "This will cause hardware integration failures in production"
            exit 1
          } else {
            echo "üéâ All hardware native modules verified successfully!"
          }
        shell: powershell
        env:
          NODE_ENV: production
          PYTHON: python
          msvs_version: 2022

      - name: Build and compile Electron app (Windows only)
        run: npm run compile:win -- --publish never
        env:
          VITE_DISTRIBUTION_CHANNEL: ${{inputs.distribution-channel}}
          NODE_ENV: production

      - name: Verify build output and ALL hardware native modules
        run: |
          echo "Build completed. Checking output and hardware integration..."
          if (Test-Path "dist") { 
            echo "‚úÖ Dist directory found"
            echo "Main executable files:"
            dir dist -Recurse -Include "*.exe" | Select-Object FullName
            
            echo "Checking ALL hardware native modules in build..."
            $buildSuccess = $true
            $unpackedPath = "dist/win-unpacked/resources/app.asar.unpacked/node_modules"
            
            # Check better-sqlite3 (Database)
            if (Test-Path "$unpackedPath/better-sqlite3") {
              echo "‚úÖ better-sqlite3 found in build"
              if (Test-Path "$unpackedPath/better-sqlite3/build") {
                echo "‚úÖ better-sqlite3 native build included (Database support)"
              } else {
                echo "‚ùå better-sqlite3 native build missing - DATABASE BROKEN"
                $buildSuccess = $false
              }
            } else {
              echo "‚ùå better-sqlite3 not found in build - DATABASE MISSING"
              $buildSuccess = $false
            }
            
            # Check node-hid (Card readers)
            if (Test-Path "$unpackedPath/node-hid") {
              echo "‚úÖ node-hid found in build"
              if (Test-Path "$unpackedPath/node-hid/build") {
                echo "‚úÖ node-hid native build included (Card reader support)"
              } else {
                echo "‚ùå node-hid native build missing - CARD READERS BROKEN"
                $buildSuccess = $false
              }
            } else {
              echo "‚ùå node-hid not found in build - CARD READERS MISSING"
              $buildSuccess = $false
            }
            
            # Check serialport (Printers)
            if (Test-Path "$unpackedPath/serialport") {
              echo "‚úÖ serialport found in build"
              if (Test-Path "$unpackedPath/serialport/build") {
                echo "‚úÖ serialport native build included (Serial printer support)"
              } else {
                echo "‚ùå serialport native build missing - SERIAL PRINTERS BROKEN"
                $buildSuccess = $false
              }
            } else {
              echo "‚ùå serialport not found in build - SERIAL PRINTERS MISSING"
              $buildSuccess = $false
            }
            
            # Check usb (USB devices)
            if (Test-Path "$unpackedPath/usb") {
              echo "‚úÖ usb found in build"
              if (Test-Path "$unpackedPath/usb/build") {
                echo "‚úÖ usb native build included (USB device support)"
              } else {
                echo "‚ùå usb native build missing - USB DEVICES BROKEN"
                $buildSuccess = $false
              }
            } else {
              echo "‚ùå usb not found in build - USB DEVICES MISSING"
              $buildSuccess = $false
            }
            
            if (-not $buildSuccess) {
              echo "üí• CRITICAL: Hardware modules missing from build!"
              echo "Production deployment will have hardware integration failures"
              exit 1
            } else {
              echo "üéâ All hardware modules successfully included in build!"
            }
          } else { 
            echo "ERROR: No dist directory found after build!"
            exit 1
          }
        shell: powershell

      - name: Install Playwright
        run: npx playwright install --with-deps
        if: hashFiles('tests/**') != ''

      - name: Debug build output structure
        if: hashFiles('tests/**') != ''
        run: |
          echo "Current directory contents:"
          dir
          echo "Dist directory contents:"
          if (Test-Path "dist") { dir dist -Recurse } else { echo "No dist directory found" }
          echo "Looking for executables:"
          if (Test-Path "dist") { dir dist -Recurse -Include "*.exe", "*.app" } else { echo "No executables found" }
        shell: powershell

      - name: Pre-test hardware module verification
        if: hashFiles('tests/**') != ''
        run: |
          echo "Verifying ALL hardware native modules are properly built before testing..."
          $testReady = $true

          # Check better-sqlite3 (Database)
          if (Test-Path "node_modules/better-sqlite3/build") {
            echo "‚úÖ better-sqlite3 native build ready for testing"
            dir "node_modules/better-sqlite3/build" -Recurse
          } else {
            echo "‚ùå WARNING: better-sqlite3 native build not found - Database tests may fail"
            $testReady = $false
          }

          # Check node-hid (Card readers)
          if (Test-Path "node_modules/node-hid/build") {
            echo "‚úÖ node-hid native build ready for testing"
            dir "node_modules/node-hid/build" -Recurse
          } else {
            echo "‚ùå WARNING: node-hid native build not found - Card reader tests may fail"
            $testReady = $false
          }

          # Check serialport (Printers)
          if (Test-Path "node_modules/serialport/build") {
            echo "‚úÖ serialport native build ready for testing"
            dir "node_modules/serialport/build" -Recurse
          } else {
            echo "‚ùå WARNING: serialport native build not found - Printer tests may fail"
            $testReady = $false
          }

          # Check usb (USB devices)
          if (Test-Path "node_modules/usb/build") {
            echo "‚úÖ usb native build ready for testing"
            dir "node_modules/usb/build" -Recurse
          } else {
            echo "‚ùå WARNING: usb native build not found - USB device tests may fail"
            $testReady = $false
          }

          if ($testReady) {
            echo "üéâ All hardware modules ready for comprehensive testing!"
          } else {
            echo "‚ö†Ô∏è Some hardware modules missing - Tests will run in simulation mode"
          }
        shell: powershell

      - name: Test Electron launch manually (debug)
        if: hashFiles('tests/**') != ''
        run: |
          echo "Testing Electron launch manually..."
          $electronPath = "node_modules\.bin\electron.cmd"
          if (Test-Path $electronPath) {
            echo "Electron binary found at: $electronPath"
            try {
              # Try to get Electron version
              & $electronPath --version
              echo "‚úÖ Electron can execute"
            } catch {
              echo "‚ùå Electron execution failed: $_"
            }
          } else {
            echo "‚ùå Electron binary not found"
          }
        shell: powershell

      - name: Run main E2E tests
        run: npm run test:all --if-present
        if: hashFiles('tests/**') != ''
        env:
          CI: true
          NODE_ENV: test
          ELECTRON_DISABLE_GPU: 1
          ELECTRON_NO_SANDBOX: 1
          PLAYWRIGHT_HEADLESS: 1
          ELECTRON_ENABLE_LOGGING: 1
          DEBUG: playwright:*
          # Hardware simulation environment
          HARDWARE_SIMULATION_MODE: true
          MOCK_PRINTER_ENABLED: true
          MOCK_CARD_READER_ENABLED: true
          MOCK_SCANNER_ENABLED: true
          # Native module paths
          PYTHON: python
          msvs_version: 2022

      - name: Run hardware integration tests
        run: npx playwright test ./tests/hardware-integration.spec.ts
        if: hashFiles('tests/hardware-integration.spec.ts') != ''
        env:
          CI: true
          NODE_ENV: test
          ELECTRON_DISABLE_GPU: 1
          ELECTRON_NO_SANDBOX: 1
          PLAYWRIGHT_HEADLESS: 1
          ELECTRON_ENABLE_LOGGING: 1
          # Hardware simulation environment
          HARDWARE_SIMULATION_MODE: true
          MOCK_PRINTER_ENABLED: true
          MOCK_CARD_READER_ENABLED: true
          MOCK_SCANNER_ENABLED: true
          # Native module paths
          PYTHON: python
          msvs_version: 2022

      - uses: actions/attest-build-provenance@v3
        with:
          subject-path: "dist/root*, dist/latest*.yml"

      - name: Upload compiled app
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{inputs.distribution-channel}}
          path: dist
