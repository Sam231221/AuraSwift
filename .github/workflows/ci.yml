# This workflow is the entry point for all CI processes.
# It handles building, testing, and semantic versioning releases.
#
# COST OPTIMIZATION: Only runs on push to main and manual triggers
# PRs do NOT trigger this workflow to save costs

name: Entry CI
on:
  workflow_dispatch:
    inputs:
      distribution-channel:
        description: Distribution channel for release. It can be `beta`, `alpha` or any string.
        type: string
        required: false
        default: "main"
      renderer-template:
        description: Define what vite template should be used to create renderer in case if renderer package doesn't exist
        required: false
        type: string
        default: ""
  push:
    branches:
      - main
    tags:
      - "v*"
    paths-ignore:
      - "**.md"
      - .editorconfig
      - ".idea/**"
      - ".vscode/**"
      - ".github/docs/**"
  # REMOVED pull_request trigger to save costs
  # PRs can be tested locally before merging to main
  workflow_call:
    inputs:
      distribution-channel:
        description: Distribution channel for release. It can be `beta`, `alpha` or any string.
        type: string
        required: true
      renderer-template:
        description: Define what vite template should be used to create renderer in case if renderer package doesn't exist
        required: false
        type: string
        default: ""

concurrency:
  group: ${{github.workflow}}-${{ github.ref }}-${{ inputs.distribution-channel || 'main' }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
  attestations: write
  issues: write
  pull-requests: write

jobs:
  #Job1: Determine version with semantic-release
  prepare:
    name: Prepare Version and Check for release
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.version.outputs.APP_VERSION }}
      COMMIT_TIMESTAMP: ${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}
      APP_FULL_VERSION: ${{ steps.version.outputs.APP_FULL_VERSION }}
      SHOULD_RELEASE: ${{ steps.version.outputs.SHOULD_RELEASE }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || github.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      # Cache semantic-release dependencies to avoid reinstalling
      - name: Cache semantic-release dependencies
        id: cache-semantic
        uses: actions/cache@v4
        with:
          path: |
            node_modules/semantic-release
            node_modules/@semantic-release
            node_modules/.cache
          key: semantic-release-${{ runner.os }}-${{ hashFiles('package.json') }}
          restore-keys: |
            semantic-release-${{ runner.os }}-

      - name: Install semantic-release dependencies only
        if: steps.cache-semantic.outputs.cache-hit != 'true'
        run: |
          # Only install the packages needed, ignore optional dependencies and scripts
          npm install --ignore-scripts --no-optional --no-save \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          PUPPETEER_SKIP_DOWNLOAD: 1

      - id: COMMIT_TIMESTAMP
        run: echo "COMMIT_TIMESTAMP=$(git show -s --format=%ct ${{ github.sha }})" >> $GITHUB_OUTPUT

      - id: version
        name: Determine version with semantic-release
        run: |
          # Get timestamp for version string
          TIMESTAMP="${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}"

          # For PRs and non-main pushes, use current version
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.ref }}" != "refs/heads/main" ]; then
            CURRENT_VERSION=$(jq -r .version package.json)
            echo "APP_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "APP_FULL_VERSION=$CURRENT_VERSION-${{ inputs.distribution-channel || 'main' }}.${TIMESTAMP}" >> $GITHUB_OUTPUT
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
            echo "ℹ️ PR/branch build - version: $CURRENT_VERSION"
          else
            # For main branch, check semantic-release
            echo "🔍 Running semantic-release dry-run to check for releasable commits..."
            
            # First, manually check commits for debugging
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            echo "📌 Last tag: ${LAST_TAG:-none}"
            if [ -n "$LAST_TAG" ]; then
              echo "📝 Commits since ${LAST_TAG}:"
              git log --pretty=format:"  - %s" ${LAST_TAG}..HEAD | head -20
              
              # Count releasable commits
              FIX_COUNT=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep -cE "^fix(\(.*\))?:" || echo "0")
              FEAT_COUNT=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep -cE "^feat(\(.*\))?:" || echo "0")
              echo "🐛 fix commits: $FIX_COUNT"
              echo "✨ feat commits: $FEAT_COUNT"
            fi
            
            # Run semantic-release and capture both stdout and stderr
            OUTPUT=$(npx semantic-release --dry-run --no-ci 2>&1 || true)
            
            # Show full output for debugging
            echo "========== SEMANTIC-RELEASE OUTPUT =========="
            echo "$OUTPUT"
            echo "============================================="
            
            # Check if there will be a release (look for common success indicators)
            if echo "$OUTPUT" | grep -qiE "(next release version|published release|creating tag|analysis of .* commits complete)"; then
              # Try multiple extraction patterns (semantic-release output varies by version)
              NEW_VERSION=$(echo "$OUTPUT" | grep -oP "(?:The next release version is|Published release|Creating tag) \K[0-9]+\.[0-9]+\.[0-9]+" | head -1)
              
              # If direct extraction fails, try alternative patterns
              if [ -z "$NEW_VERSION" ]; then
                NEW_VERSION=$(echo "$OUTPUT" | grep -oP "version \K[0-9]+\.[0-9]+\.[0-9]+" | head -1)
              fi
              
              # If still no version, try JSON output pattern
              if [ -z "$NEW_VERSION" ]; then
                NEW_VERSION=$(echo "$OUTPUT" | grep -oP '"nextRelease".*?"version":\s*"\K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
              fi
              
              if [ -n "$NEW_VERSION" ]; then
                echo "APP_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
                echo "APP_FULL_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
                echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
                echo "✅ New release will be created: v$NEW_VERSION"
              else
                # Check if semantic-release found commits but couldn't determine version
                CURRENT_VERSION=$(jq -r .version package.json)
                
                # Manually determine next version based on commits
                echo "⚙️ Attempting manual version bump calculation..."
                
                # Get commits since last tag
                LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                if [ -z "$LAST_TAG" ]; then
                  COMMITS=$(git log --pretty=format:"%s" HEAD)
                else
                  COMMITS=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD)
                fi
                
                echo "🔍 Checking commits for releasable types..."
                echo "$COMMITS" | head -10
                
                # Count releasable commit types (with or without scope)
                FIX_COUNT=$(echo "$COMMITS" | grep -cE "^fix(\([^)]*\))?:" || echo "0")
                FEAT_COUNT=$(echo "$COMMITS" | grep -cE "^feat(\([^)]*\))?:" || echo "0")
                PERF_COUNT=$(echo "$COMMITS" | grep -cE "^perf(\([^)]*\))?:" || echo "0")
                REFACTOR_COUNT=$(echo "$COMMITS" | grep -cE "^refactor(\([^)]*\))?:" || echo "0")
                BUILD_COUNT=$(echo "$COMMITS" | grep -cE "^build(\([^)]*\))?:" || echo "0")
                
                echo "📊 Releasable commits found:"
                echo "  - fix: $FIX_COUNT"
                echo "  - feat: $FEAT_COUNT"
                echo "  - perf: $PERF_COUNT"
                echo "  - refactor: $REFACTOR_COUNT"
                echo "  - build: $BUILD_COUNT"
                
                # Check if we have any releasable commits
                TOTAL_RELEASABLE=$((FIX_COUNT + FEAT_COUNT + PERF_COUNT + REFACTOR_COUNT + BUILD_COUNT))
                
                if [ "$TOTAL_RELEASABLE" -gt 0 ]; then
                  # Calculate next version
                  if [ "$FEAT_COUNT" -gt 0 ]; then
                    # Minor bump for feat
                    NEXT_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{$2=$2+1; $3=0; print $1"."$2"."$3}')
                    echo "⬆️ MINOR bump (feat commits found)"
                  else
                    # Patch bump for fix/perf/refactor/build
                    NEXT_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{$3=$3+1; print $1"."$2"."$3}')
                    echo "⬆️ PATCH bump (fix/perf/refactor/build commits found)"
                  fi
                  
                  echo "APP_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
                  echo "APP_FULL_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
                  echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
                  echo "✅ Calculated next version (manual): v$NEXT_VERSION"
                else
                  echo "APP_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                  echo "APP_FULL_VERSION=$CURRENT_VERSION-${{ inputs.distribution-channel || 'main' }}.${TIMESTAMP}" >> $GITHUB_OUTPUT
                  echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
                  echo "ℹ️ No releasable commits since last tag"
                  echo "📝 Found only: docs, chore, ci, test, or style commits"
                fi
              fi
            else
              CURRENT_VERSION=$(jq -r .version package.json)
              echo "APP_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "APP_FULL_VERSION=$CURRENT_VERSION-${{ inputs.distribution-channel || 'main' }}.${TIMESTAMP}" >> $GITHUB_OUTPUT
              echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No releasable commits found"
              echo "📝 Commits since last release must use: feat:, fix:, perf:, refactor:, build:"
              echo "📝 Current commits are likely: docs:, chore:, ci:, test: (non-releasable)"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN || github.token }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || github.token }}

      - name: Add version summary
        run: |
          echo "- \`COMMIT_TIMESTAMP\`: ${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`APP_VERSION\`: ${{ steps.version.outputs.APP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`APP_FULL_VERSION\`: ${{ steps.version.outputs.APP_FULL_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`SHOULD_RELEASE\`: ${{ steps.version.outputs.SHOULD_RELEASE }}" >> $GITHUB_STEP_SUMMARY

  #Job2: Build and test
  compile-and-test:
    uses: ./.github/workflows/compile-and-test.yml
    needs: prepare
    permissions:
      contents: write
      id-token: write
      attestations: write
    secrets: inherit
    with:
      renderer-template: ${{ inputs.renderer-template }}
      app-version: ${{ needs.prepare.outputs.APP_FULL_VERSION }}
      distribution-channel: ${{ inputs.distribution-channel || 'main' }}

  #Job3: Semantic Release (only on main branch when there are releasable commits)
  semantic-release:
    name: Semantic Release with Electron Builder
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.prepare.outputs.SHOULD_RELEASE == 'true'
    needs:
      - prepare
      - compile-and-test

    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install semantic-release dependencies only
        run: |
          npm install --ignore-scripts --no-optional --no-save \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          PUPPETEER_SKIP_DOWNLOAD: 1

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: windows-${{ inputs.distribution-channel || 'main' }}
          path: dist

      - name: Run semantic-release
        run: npx semantic-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
