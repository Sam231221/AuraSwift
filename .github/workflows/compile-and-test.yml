name: Compile and test

on:
  workflow_call:
    inputs:
      renderer-template:
        description: Define what vite template should be used to create renderer in case if renderer package doesn't exist
        required: false
        type: string
        default: ""
      app-version:
        required: true
        type: string
      distribution-channel:
        required: true
        type: string

defaults:
  run:
    shell: "bash"

permissions:
  contents: write
  id-token: write
  attestations: write

env:
  NODE_NO_WARNINGS: 1
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  ELECTRON_DISABLE_GPU: 1
  ELECTRON_NO_SANDBOX: 1
  npm_config_audit: false
  npm_config_fund: false
  PYTHON: python
  MSVS-VERSION: 2022
  GYP-MSVS-VERSION: 2022

jobs:
  typecheck:
    runs-on: windows-latest
    env:
      PYTHON: python
      MSVS-VERSION: 2022
      GYP-MSVS-VERSION: 2022
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js 18 for native module compatibility
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup MSBuild (Windows)
        uses: microsoft/setup-msbuild@v2

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Show build environment summary
        run: |
          echo "Node.js version: $(node --version)"
          echo "Python version: $(python --version)"
          echo "MSBuild available: $(Get-Command msbuild -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source)"
        shell: powershell

      - uses: ./.github/actions/init-template-with-renderer
        name: Setup boilerplate
        with:
          renderer-template: ${{inputs.renderer-template}}

      - name: Install project dependencies
        run: |
          npm ci --verbose
        shell: powershell

      - run: npm run typecheck -ws --if-present

  compile:
    runs-on: windows-latest
    env:
      PYTHON: python
      MSVS-VERSION: 2022
      GYP-MSVS-VERSION: 2022
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js 18 for native module compatibility
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup MSBuild (Windows)
        uses: microsoft/setup-msbuild@v2

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Show build environment summary
        run: |
          Write-Host "Node.js version: $(node --version)"
          Write-Host "Python version: $(python --version)"
          $msbuild = Get-Command msbuild -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
          Write-Host "MSBuild available: $msbuild"
        shell: pwsh

      - name: Install and configure node-gyp/electron-rebuild globally (before npm ci!)
        run: |
          npm install --location=global node-gyp@latest
          npm install --location=global electron-rebuild@latest
          echo "node-gyp version: $(npx node-gyp --version)"
          echo "electron-rebuild version: $(npx electron-rebuild --version)"
        shell: powershell

      - uses: ./.github/actions/init-template-with-renderer
        name: Setup boilerplate
        with:
          renderer-template: ${{inputs.renderer-template}}

      - name: Remove node_modules
        run: Remove-Item -Recurse -Force node_modules
        shell: pwsh

      - name: Install project dependencies
        run: |
          npm ci --verbose
        shell: powershell

      - name: Use electron-rebuild (fastest for Electron apps)
        run: npx electron-rebuild --only=better-sqlite3,node-hid,serialport,usb --verbose
        shell: powershell

      - name: Verify native modules
        run: |
          $modules = @("better-sqlite3", "node-hid", "serialport", "usb")
          $missing = $false
          foreach ($module in $modules) {
            if (!(Test-Path "node_modules/$module/build")) {
              Write-Host "❌ $module native build missing"
              $missing = $true
            }
          }
          if ($missing) { exit 1 }
        shell: powershell

      - name: Clean install if rebuild failed
        if: failure()
        run: |
          if (Test-Path "node_modules") { Remove-Item -Recurse -Force node_modules }
          if (Test-Path "package-lock.json") { Remove-Item package-lock.json }
          npm ci --verbose
        shell: powershell

      - run: npm version "${{inputs.app-version}}" --no-git-tag-version

      - name: Build and compile Electron app (Windows only)
        run: npm run compile:win -- --publish never
        env:
          VITE_DISTRIBUTION_CHANNEL: ${{inputs.distribution-channel}}
          NODE_ENV: production

      - name: Verify build output and hardware modules
        run: |
          if (Test-Path "dist") { 
            echo "✅ Dist directory found"
            dir dist -Recurse -Include "*.exe"
          } else { 
            echo "ERROR: No dist directory found after build!"
            exit 1
          }
        shell: powershell

      - name: Install Playwright
        run: npx playwright install --with-deps
        if: hashFiles('tests/**') != ''

      - name: Debug build output structure
        if: hashFiles('tests/**') != ''
        run: |
          if (Test-Path "dist") { dir dist -Recurse } else { echo "No dist directory found" }
          if (Test-Path "dist") { dir dist -Recurse -Include "*.exe", "*.app" } else { echo "No executables found" }
        shell: powershell

      - name: Pre-test hardware module verification
        if: hashFiles('tests/**') != ''
        run: |
          $testReady = $true
          $modules = @("better-sqlite3", "node-hid", "serialport", "usb")
          foreach ($module in $modules) {
            if (Test-Path "node_modules/$module/build") {
              echo "✅ $module native build ready for testing"
            } else {
              echo "❌ WARNING: $module native build not found"
              $testReady = $false
            }
          }
        shell: powershell

      - name: Run main E2E tests
        run: npm run test:all --if-present
        if: hashFiles('tests/**') != ''
        env:
          CI: true
          NODE_ENV: test
          ELECTRON_DISABLE_GPU: 1
          ELECTRON_NO_SANDBOX: 1
          PLAYWRIGHT_HEADLESS: 1
          ELECTRON_ENABLE_LOGGING: 1
          DEBUG: playwright:*
          HARDWARE_SIMULATION_MODE: true
          MOCK_PRINTER_ENABLED: true
          MOCK_CARD_READER_ENABLED: true
          MOCK_SCANNER_ENABLED: true

      - name: Run hardware integration tests
        run: npx playwright test ./tests/hardware-integration.spec.ts
        if: hashFiles('tests/hardware-integration.spec.ts') != ''
        env:
          CI: true
          NODE_ENV: test
          ELECTRON_DISABLE_GPU: 1
          ELECTRON_NO_SANDBOX: 1
          PLAYWRIGHT_HEADLESS: 1
          ELECTRON_ENABLE_LOGGING: 1
          HARDWARE_SIMULATION_MODE: true
          MOCK_PRINTER_ENABLED: true
          MOCK_CARD_READER_ENABLED: true
          MOCK_SCANNER_ENABLED: true

      - uses: actions/attest-build-provenance@v3
        with:
          subject-path: "dist/root*, dist/latest*.yml"

      - name: Upload compiled app
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{inputs.distribution-channel}}
          path: dist
