name: Setup Electron Template with Renderer
description: Initialize the Electron template with renderer package and dependencies

inputs:
  renderer-template:
    description: Define what vite template should be used to create renderer in case if renderer package doesn't exist
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: "20.x"
        cache: "npm"

    - name: Check if renderer directory exists
      id: check-renderer
      run: >-
        if [ -d "packages/renderer" ]; then
          echo "RENDERER_EXIST=true" >> $GITHUB_OUTPUT
        else
          echo "RENDERER_EXIST=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - run: |
        npm run create-renderer -- -- --template ${{inputs.renderer-template}}
        npm start --workspace @app/integrate-renderer
      shell: bash
      if: inputs.renderer-template != '' && steps.check-renderer.outputs.RENDERER_EXIST == 'false'

    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: npm-${{ runner.os }}-${{ inputs.renderer-template }}-${{ hashFiles('**/package.json') }}
        restore-keys: |
          npm-${{ runner.os }}-${{ inputs.renderer-template }}-

    - name: Clear npm cache (integrity issue workaround)
      run: npm cache clean --force
      shell: bash

    - name: Install Dependencies
      run: |
        set -e
        if [ "${{ steps.check-renderer.outputs.RENDERER_EXIST }}" == "true" ] && [ -f "package-lock.json" ]; then
          echo "Using npm ci for existing project..."
          npm ci --prefer-offline --no-audit --progress=false
        else
          echo "Using npm install for new project..."
          npm install --prefer-offline --no-audit --progress=false
        fi
      shell: bash
